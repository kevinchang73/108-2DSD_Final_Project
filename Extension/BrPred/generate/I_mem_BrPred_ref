// If module CHIP has sth wrong,
// the program will stuck at jump and write the wrong answer, 
// and then TestBed will notice sth wrong.
// a : # never      branch
// b : # interleave branch
// c : # always     branch

13_00_00_00 // 000000000000_00000_000_00000_0010011    //0x00// nop
13_04_20_00 // 000000000010_00000_000_01000_0010011    //0x04// addi x8  x0  0x002           // a = 2
93_04_20_00 // 000000000010_00000_000_01001_0010011    //0x08// addi x9  x0  0x002           // b = 2
13_05_20_00 // 000000000010_00000_000_01010_0010011    //0x0C// addi x10 x0  0x002           // c = 2
93_05_00_00 // 000000000000_00000_000_01011_0010011    //0x10// addi x11 x0  0x000
13_06_00_00 // 000000000000_00000_000_01100_0010011    //0x14// addi x12 x0  0x000
93_06_00_00 // 000000000000_00000_000_01101_0010011    //0x18// addi x13 x0  0x000
93_85_15_00 // 000000000001_01011_000_01011_0010011    //0x1C// addi x11 x11 0x001           // Part_A
63_06_B4_00 // 0_000000_01011_01000_000_0110_0_1100011 //0x20// beq  x8  x11 0x006 (to 0x2C) // to Part_B
6F_F0_9F_FF // 1_1111111100_1_11111111_00000_1101111   //0x24// jal  x0  0xFFFFC (to 0x1C)   // to Part_A
6F_00_40_02 // 0_0000010010_0_00000000_00000_1101111   //0x28// jal  x0  0x00012 (to 0x4C)   // to Error
13_06_16_00 // 000000000001_01100_000_01100_0010011    //0x2C// addi x12 x12 0x001           // Part_B
63_94_C4_00 // 0_000000_01100_01001_001_0100_0_1100011 //0x30// bne  x9  x12 0x004 (to 0x38) // to Part_B_end
6F_00_C0_00 // 0_0000000110_0_00000000_00000_1101111   //0x34// jal  x0  0x00006 (to 0x40)   // to Part_C
E3_0A_B4_FE // 1_111111_01011_01000_000_1010_1_1100011 //0x38// beq  x8  x11 0xFFA (to 0x2C) // Part_B_end, to Part_B
6F_00_00_01 // 0_0000001000_0_00000000_00000_1101111   //0x3C// jal  x0  0x00008 (to 0x4C)   // to Error
93_86_16_00 // 000000000001_01101_000_01101_0010011    //0x40// addi x13 x13 0x001           // Part_C
E3_1E_D5_FE // 1_111111_01101_01010_001_1110_1_1100011 //0x44// bne  x10 x13 0xFFE (to 0x40) // to Part_C
6F_00_80_00 // 0_0000000100_0_00000000_00000_1101111   //0x48// jal  x0  0x00004 (to 0x50)   // to End
23_20_00_00 // 0000000_00000_00000_010_00000_0100011   //0x4C// sw   x0  x0  0x000           // Error
33_87_C5_00 // 0000000_01100_01011_000_01110_0110011   //0x50// add  x14 x11 x12             // End
33_07_D7_00 // 0000000_01101_01110_000_01110_0110011   //0x54// add  x14 x14 x13
23_20_E0_00 // 0000000_01110_00000_010_00000_0100011   //0x58// sw   x14 x0  0x000           // a+b+c = 6
13_00_00_00 // 000000000000_00000_000_00000_0010011    //0x5C// nop